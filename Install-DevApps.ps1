<#
.SYNOPSIS
    Script para instala√ß√£o autom√°tica de aplicativos de desenvolvimento
.DESCRIPTION
    Este script instala automaticamente uma lista de aplicativos essenciais para desenvolvimento
    usando o Windows Package Manager (winget) como gerenciador principal.
    Se o aplicativo j√° estiver instalado, verifica e executa atualiza√ß√µes dispon√≠veis.
.PARAMETER AppList
    Lista de aplicativos a serem instalados (opcional - usa lista padr√£o se n√£o especificado)
.PARAMETER SkipDependencies
    Pula a verifica√ß√£o e instala√ß√£o de depend√™ncias
.PARAMETER SkipUpdates
    Pula as atualiza√ß√µes de aplicativos j√° instalados
.EXAMPLE
    .\Install-DevApps.ps1
    .\Install-DevApps.ps1 -AppList @("Git.Git", "Docker.DockerDesktop")
    .\Install-DevApps.ps1 -SkipUpdates
.NOTES
    Autor: PowerShell Expert
    Vers√£o: 2.0
    Requer: Windows 10/11, PowerShell 5.1+
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory = $false)]
    [string[]]$AppList = @(),
    
    [Parameter(Mandatory = $false)]
    [switch]$SkipDependencies,
    
    [Parameter(Mandatory = $false)]
    [switch]$SkipUpdates
)

# Configura√ß√£o de aplicativos padr√£o
$DefaultApps = @{
    "Docker Desktop"              = "Docker.DockerDesktop"
    "Postman"                    = "Postman.Postman"
    "Visual Studio Community"    = "Microsoft.VisualStudio.2022.Community"
    "Git"                       = "Git.Git"
    "Slack"                     = "SlackTechnologies.Slack"
    "DBeaver"                   = "dbeaver.dbeaver"
    "SQL Server Management Studio" = "Microsoft.SQLServerManagementStudio"
}

# Enum para status de instala√ß√£o
enum InstallStatus {
    Success
    Failed
    Updated
    AlreadyLatest
    Skipped
}

# Fun√ß√£o para verificar se o script est√° sendo executado como administrador
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Fun√ß√£o para verificar se o winget est√° instalado
function Test-WingetInstalled {
    try {
        $wingetVersion = winget --version
        Write-Host "‚úì Windows Package Manager encontrado: $wingetVersion" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Warning "Windows Package Manager (winget) n√£o encontrado"
        return $false
    }
}

# Fun√ß√£o para instalar o winget se necess√°rio
function Install-Winget {
    Write-Host "üîÑ Instalando Windows Package Manager..." -ForegroundColor Yellow
    
    try {
        # Baixar e instalar App Installer do Microsoft Store
        $appInstallerUrl = "https://aka.ms/getwinget"
        Start-Process $appInstallerUrl
        
        Write-Host "‚ö†Ô∏è  Por favor, instale o 'Instalador de Aplicativos' da Microsoft Store que foi aberto." -ForegroundColor Yellow
        Write-Host "‚ö†Ô∏è  Ap√≥s a instala√ß√£o, execute este script novamente." -ForegroundColor Yellow
        
        Read-Host "Pressione Enter ap√≥s completar a instala√ß√£o para continuar"
        
        # Verificar novamente
        if (-not (Test-WingetInstalled)) {
            throw "Winget ainda n√£o est√° dispon√≠vel ap√≥s a instala√ß√£o"
        }
    }
    catch {
        Write-Error "Erro ao instalar o Windows Package Manager: $($_.Exception.Message)"
        return $false
    }
    
    return $true
}

# Fun√ß√£o para verificar e instalar depend√™ncias
function Install-Dependencies {
    Write-Host "`nüîç Verificando depend√™ncias..." -ForegroundColor Cyan
    
    # Verificar winget
    if (-not (Test-WingetInstalled)) {
        if (-not (Install-Winget)) {
            throw "N√£o foi poss√≠vel instalar o Windows Package Manager"
        }
    }
    
    # Atualizar winget sources
    Write-Host "üîÑ Atualizando fontes do winget..." -ForegroundColor Yellow
    try {
        winget source update
        Write-Host "‚úì Fontes atualizadas com sucesso" -ForegroundColor Green
    }
    catch {
        Write-Warning "Aviso: N√£o foi poss√≠vel atualizar as fontes do winget"
    }
}

# Fun√ß√£o para verificar se um aplicativo est√° instalado
function Test-ApplicationInstalled {
    param(
        [string]$PackageId
    )
    
    try {
        $result = winget list --id $PackageId --exact 2>$null
        return ($LASTEXITCODE -eq 0 -and $result -match $PackageId)
    }
    catch {
        return $false
    }
}

# Fun√ß√£o para verificar se h√° atualiza√ß√µes dispon√≠veis
function Test-UpdateAvailable {
    param(
        [string]$PackageId
    )
    
    try {
        $result = winget upgrade --id $PackageId --include-unknown 2>$null
        return ($LASTEXITCODE -eq 0 -and $result -match $PackageId)
    }
    catch {
        return $false
    }
}

# Fun√ß√£o para atualizar um aplicativo
function Update-Application {
    param(
        [string]$AppName,
        [string]$PackageId
    )
    
    Write-Host "üîÑ Atualizando $AppName..." -ForegroundColor Yellow
    
    try {
        $updateResult = winget upgrade --id $PackageId --accept-package-agreements --accept-source-agreements --silent
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úì $AppName atualizado com sucesso" -ForegroundColor Green
            return [InstallStatus]::Updated
        }
        else {
            Write-Warning "‚ö†Ô∏è  Poss√≠vel problema na atualiza√ß√£o de $AppName (C√≥digo: $LASTEXITCODE)"
            return [InstallStatus]::Failed
        }
    }
    catch {
        Write-Error "‚ùå Erro ao atualizar ${AppName}: $($_.Exception.Message)"
        return [InstallStatus]::Failed
    }
}

# Fun√ß√£o para instalar um aplicativo
function Install-NewApplication {
    param(
        [string]$AppName,
        [string]$PackageId
    )
    
    Write-Host "üöÄ Instalando $AppName..." -ForegroundColor Cyan
    
    try {
        $installResult = winget install --id $PackageId --accept-package-agreements --accept-source-agreements --silent
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úì $AppName instalado com sucesso" -ForegroundColor Green
            return [InstallStatus]::Success
        }
        else {
            Write-Warning "‚ö†Ô∏è  Poss√≠vel problema na instala√ß√£o de $AppName (C√≥digo: $LASTEXITCODE)"
            return [InstallStatus]::Failed
        }
    }
    catch {
        Write-Error "‚ùå Erro ao instalar ${AppName}: $($_.Exception.Message)"
        return [InstallStatus]::Failed
    }
}

# Fun√ß√£o principal para processar um aplicativo
function Install-Application {
    param(
        [string]$AppName,
        [string]$PackageId
    )
    
    Write-Host "`nüì¶ Processando $AppName..." -ForegroundColor Cyan
    
    try {
        # Verificar se o aplicativo est√° instalado
        if (Test-ApplicationInstalled -PackageId $PackageId) {
            Write-Host "‚ÑπÔ∏è  $AppName j√° est√° instalado" -ForegroundColor Blue
            
            if ($SkipUpdates) {
                Write-Host "‚è≠Ô∏è  Pulando verifica√ß√£o de atualiza√ß√µes (SkipUpdates ativado)" -ForegroundColor Yellow
                return [InstallStatus]::Skipped
            }
            
            # Verificar se h√° atualiza√ß√µes dispon√≠veis
            Write-Host "üîç Verificando atualiza√ß√µes para $AppName..." -ForegroundColor Yellow
            
            if (Test-UpdateAvailable -PackageId $PackageId) {
                Write-Host "üì• Atualiza√ß√£o dispon√≠vel para $AppName" -ForegroundColor Cyan
                return Update-Application -AppName $AppName -PackageId $PackageId
            }
            else {
                Write-Host "‚úÖ $AppName j√° est√° na vers√£o mais recente" -ForegroundColor Green
                return [InstallStatus]::AlreadyLatest
            }
        }
        else {
            # Aplicativo n√£o est√° instalado - fazer instala√ß√£o
            return Install-NewApplication -AppName $AppName -PackageId $PackageId
        }
    }
    catch {
        Write-Error "‚ùå Erro ao processar ${AppName}: $($_.Exception.Message)"
        return [InstallStatus]::Failed
    }
}

# Fun√ß√£o para criar relat√≥rio de instala√ß√£o
function New-InstallationReport {
    param(
        [hashtable]$Results
    )
    
    Write-Host "`nüìä RELAT√ìRIO DE INSTALA√á√ÉO E ATUALIZA√á√ïES" -ForegroundColor Magenta
    Write-Host "=" * 60 -ForegroundColor Magenta
    
    $counters = @{
        Success = 0
        Failed = 0
        Updated = 0
        AlreadyLatest = 0
        Skipped = 0
    }
    
    foreach ($app in $Results.Keys) {
        $status = $Results[$app]
        $counters[$status.ToString()]++
        
        switch ($status) {
            ([InstallStatus]::Success) { 
                Write-Host "‚úÖ $app - INSTALADO" -ForegroundColor Green 
            }
            ([InstallStatus]::Updated) { 
                Write-Host "üîÑ $app - ATUALIZADO" -ForegroundColor Cyan 
            }
            ([InstallStatus]::AlreadyLatest) { 
                Write-Host "‚úÖ $app - J√Å ATUALIZADO" -ForegroundColor Green 
            }
            ([InstallStatus]::Failed) { 
                Write-Host "‚ùå $app - FALHA" -ForegroundColor Red 
            }
            ([InstallStatus]::Skipped) { 
                Write-Host "‚è≠Ô∏è  $app - PULADO" -ForegroundColor Yellow 
            }
        }
    }
    
    Write-Host "`nüìà RESUMO DETALHADO:" -ForegroundColor Cyan
    Write-Host "   Instala√ß√µes: $($counters.Success)" -ForegroundColor Green
    Write-Host "   Atualiza√ß√µes: $($counters.Updated)" -ForegroundColor Cyan
    Write-Host "   J√° atualizados: $($counters.AlreadyLatest)" -ForegroundColor Green
    Write-Host "   Pulados: $($counters.Skipped)" -ForegroundColor Yellow
    Write-Host "   Falhas: $($counters.Failed)" -ForegroundColor Red
    Write-Host "   Total processado: $($Results.Count)" -ForegroundColor White
    
    # Calcular taxa de sucesso
    $successfulOperations = $counters.Success + $counters.Updated + $counters.AlreadyLatest
    $successRate = [math]::Round(($successfulOperations / $Results.Count) * 100, 1)
    Write-Host "   Taxa de sucesso: $successRate%" -ForegroundColor $(if($successRate -ge 90) { "Green" } elseif($successRate -ge 70) { "Yellow" } else { "Red" })
}

# Fun√ß√£o principal
function Start-Installation {
    Write-Host "üéØ INSTALADOR E ATUALIZADOR AUTOM√ÅTICO DE APLICATIVOS" -ForegroundColor Magenta
    Write-Host "=" * 65 -ForegroundColor Magenta
    
    # Verificar privil√©gios de administrador
    if (-not (Test-Administrator)) {
        Write-Warning "‚ö†Ô∏è  Este script deve ser executado como Administrador para melhor compatibilidade"
        $continue = Read-Host "Deseja continuar mesmo assim? (s/N)"
        if ($continue -notmatch '^[Ss]$') {
            Write-Host "Execu√ß√£o cancelada pelo usu√°rio" -ForegroundColor Yellow
            return
        }
    }
    
    # Instalar depend√™ncias se necess√°rio
    if (-not $SkipDependencies) {
        Install-Dependencies
    }
    
    # Determinar lista de aplicativos
    $appsToInstall = if ($AppList.Count -gt 0) {
        $customApps = @{}
        foreach ($app in $AppList) {
            $appName = ($DefaultApps.GetEnumerator() | Where-Object { $_.Value -eq $app }).Key
            if ($appName) {
                $customApps[$appName] = $app
            }
            else {
                $customApps[$app] = $app
            }
        }
        $customApps
    }
    else {
        $DefaultApps
    }
    
    Write-Host "`nüìã Aplicativos a serem processados:" -ForegroundColor Cyan
    $appsToInstall.Keys | ForEach-Object { Write-Host "   ‚Ä¢ $_" -ForegroundColor White }
    
    if ($SkipUpdates) {
        Write-Host "`n‚ö†Ô∏è  Modo SkipUpdates ativado - aplicativos j√° instalados n√£o ser√£o atualizados" -ForegroundColor Yellow
    }
    else {
        Write-Host "`nüîÑ Aplicativos j√° instalados ser√£o verificados para atualiza√ß√µes" -ForegroundColor Green
    }
    
    $confirm = Read-Host "`nDeseja continuar? (S/n)"
    if ($confirm -match '^[Nn]$') {
        Write-Host "Opera√ß√£o cancelada pelo usu√°rio" -ForegroundColor Yellow
        return
    }
    
    # Processar aplicativos
    $installResults = @{}
    $totalApps = $appsToInstall.Count
    $currentApp = 0
    
    foreach ($app in $appsToInstall.GetEnumerator()) {
        $currentApp++
        Write-Host "`n[$currentApp/$totalApps]" -ForegroundColor Gray -NoNewline
        $installResults[$app.Key] = Install-Application -AppName $app.Key -PackageId $app.Value
        
        # Pausa entre processamentos para evitar sobrecarregar o sistema
        if ($currentApp -lt $totalApps) {
            Start-Sleep -Seconds 2
        }
    }
    
    # Gerar relat√≥rio
    New-InstallationReport -Results $installResults
    
    # Configura√ß√µes p√≥s-instala√ß√£o
    Write-Host "`nüîß CONFIGURA√á√ïES P√ìS-INSTALA√á√ÉO" -ForegroundColor Magenta
    Write-Host "Algumas configura√ß√µes podem ser necess√°rias:" -ForegroundColor Yellow
    Write-Host "‚Ä¢ Docker Desktop: Pode requerer reinicializa√ß√£o e configura√ß√£o do WSL2" -ForegroundColor White
    Write-Host "‚Ä¢ Visual Studio: Pode requerer configura√ß√£o de workloads adicionais" -ForegroundColor White
    Write-Host "‚Ä¢ Git: Configure seu nome e email:" -ForegroundColor White
    Write-Host "  git config --global user.name 'Seu Nome'" -ForegroundColor Gray
    Write-Host "  git config --global user.email 'seu.email@exemplo.com'" -ForegroundColor Gray
    
    Write-Host "`nüéâ Processamento conclu√≠do!" -ForegroundColor Green
}

# Tratamento de erros global
try {
    Start-Installation
}
catch {
    Write-Error "‚ùå Erro fatal durante a execu√ß√£o: $($_.Exception.Message)"
    Write-Host "Stack Trace:" -ForegroundColor Red
    Write-Host $_.ScriptStackTrace -ForegroundColor Red
}
finally {
    Write-Host "`nPressione Enter para fechar..." -ForegroundColor Gray
    Read-Host
}